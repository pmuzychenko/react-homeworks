{"version":3,"sources":["p2-homeworks/h3/Greeting.module.css","p2-homeworks/h4/common/c1-SuperInputText/SuperInputText.module.css","p2-homeworks/h4/common/c3-SuperCheckbox/SuperCheckbox.module.css","p2-homeworks/h4/common/c2-SuperButton/SuperButton.module.css","p1-main/m1-ui/u1-app/App.module.css","p2-homeworks/h4/HW4.module.css","p2-homeworks/h4/common/c1-SuperInputText/SuperInputText.tsx","p2-homeworks/h3/Greeting.tsx","p2-homeworks/h3/GreetingContainer.tsx","p2-homeworks/h3/AlternativeGreeting.tsx","p2-homeworks/h3/HW3.tsx","p2-homeworks/h4/common/c2-SuperButton/SuperButton.tsx","p2-homeworks/h4/common/c3-SuperCheckbox/SuperCheckbox.tsx","p2-homeworks/h4/HW4.tsx","p1-main/m1-ui/u1-app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","className","restProps","finalSpanClassName","s","finalInputClassName","errorInput","superInput","e","currentTarget","value","key","Greeting","name","setNameCallback","addUser","totalUsers","someClass","greetingClass","placeholder","errorTextClass","onClick","GreetingContainer","users","addUserCallback","useState","setName","setError","console","log","length","trim","alert","AlternativeGreeting","props","map","user","index","_id","message","userNumberInTheList","HW3","setUsers","newInputElement","v1","SuperButton","red","finalClassName","default","SuperCheckbox","onChangeChecked","children","checkbox","labelCheckbox","checked","HW4","text","setText","showAlert","setChecked","column","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.6c5a29f8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"greetingClass\":\"Greeting_greetingClass__2uFvY\",\"someClass\":\"Greeting_someClass__3ABWm\",\"error\":\"Greeting_error__1hxfD\",\"errorTextClass\":\"Greeting_errorTextClass__1UOaK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__1I9KO\",\"errorInput\":\"SuperInputText_errorInput__2lq8v\",\"error\":\"SuperInputText_error__1dMly\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"labelCheckbox\":\"SuperCheckbox_labelCheckbox__2gsAE\",\"spanClassName\":\"SuperCheckbox_spanClassName__2dexf\",\"checkbox\":\"SuperCheckbox_checkbox__xLCQa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__2QX8Y\",\"red\":\"SuperButton_red__3hWLW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1465z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blue\":\"HW4_blue__2OVBR\",\"column\":\"HW4_column__1iOLc\"};","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\r\nimport s from \"./SuperInputText.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n};\r\n\r\nexport const SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value);\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        e.key === \"Enter\" // если нажата кнопка Enter\r\n        && onEnter // и есть пропс onEnter\r\n        && onEnter(); // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : \"\"}`;\r\n  // const finalInputClassName = `${s.errorInput} ${className}`; // need to fix with (?:) and s.superInput\r\n    const finalInputClassName = `${error ? s.errorInput : s.superInput}`; // need to fix with (?:) and s.superInput\r\n    return (\r\n        <>\r\n            <input\r\n                type={\"text\"}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SuperInputText;\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./Greeting.module.css\";\r\nimport { SuperInputText } from \"../h4/common/c1-SuperInputText/SuperInputText\";\r\n\r\ntype GreetingPropsType = {\r\n    name: string // need to fix any\r\n    setNameCallback: (e: ChangeEvent<HTMLInputElement>) => void // need to fix any\r\n    addUser: () => void // need to fix any\r\n    error: string // need to fix any\r\n    totalUsers: number // need to fix any\r\n}\r\n\r\n// презентационная компонента (для верстальщика)\r\nconst Greeting: React.FC<GreetingPropsType> = (\r\n    {name, setNameCallback, addUser, error, totalUsers} // деструктуризация пропсов\r\n) => {\r\n    const inputClass = name === '' ? s.error : s.someClass; // need to fix with (?:)\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.greetingClass}>\r\n                {/*<input placeholder={`Please, enter the user's name`} value={name} onChange={setNameCallback} className={inputClass}/>*/}\r\n                <SuperInputText placeholder={`Please, enter the user's name`} value={name} onChange={setNameCallback}/>\r\n                <span className={s.errorTextClass}>{error}</span>\r\n                <button onClick={addUser}>add</button>\r\n                <span>{totalUsers}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Greeting;\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport Greeting from \"./Greeting\";\r\nimport {UserType} from \"./HW3\";\r\n\r\ntype GreetingContainerPropsType = {\r\n    users: Array<UserType> // need to fix any\r\n    addUserCallback: (name: string) => void  // need to fix any\r\n}\r\n\r\n// более простой и понятный для новичков\r\n// function GreetingContainer(props: GreetingPropsType) {\r\n\r\n// более современный и удобный для про :)\r\n// уровень локальной логики\r\nconst GreetingContainer: React.FC<GreetingContainerPropsType> = ({users, addUserCallback}) => { // деструктуризация пропсов\r\n    const [name, setName] = useState<string>(\"\"); // need to fix any\r\n    const [error, setError] = useState<string>(\"\"); // need to fix any\r\n\r\n\r\n    const setNameCallback = (e: ChangeEvent<HTMLInputElement>) => { // need to fix any\r\n        setName(e.currentTarget.value);\r\n    };\r\n    const addUser = () => {\r\n        if (name.trim() === '') {\r\n            setError('Error: empty input!')\r\n        } else {\r\n            setError('');\r\n            addUserCallback(name.trim());\r\n            alert(`Hello, ${name.trim()}!`); // need to fix\r\n            setName('');\r\n        }\r\n\r\n    };\r\n    console.log(users)\r\n    const totalUsers = users.length; // need to fix\r\n\r\n    return (\r\n            <Greeting\r\n                name={name}\r\n                setNameCallback={setNameCallback}\r\n                addUser={addUser}\r\n                error={error}\r\n                totalUsers={totalUsers}\r\n            />\r\n    );\r\n}\r\n\r\nexport default GreetingContainer;\r\n","import React from \"react\";\r\nimport {UserType} from \"./HW3\";\r\n\r\ntype PropsType = {\r\n    users: Array<UserType>\r\n    message: string\r\n    userNumberInTheList: string\r\n\r\n}\r\n\r\nconst AlternativeGreeting: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            {props.users.map((user, index) =>\r\n                (<div key={user._id}>{props.message}\r\n                    {user.name}\r\n                    {props.userNumberInTheList}\r\n                    {props.users.length - index}\r\n                </div>))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AlternativeGreeting;\r\n","import React, {useState} from \"react\";\r\nimport GreetingContainer from \"./GreetingContainer\";\r\nimport {v1} from \"uuid\";\r\nimport AlternativeGreeting from \"./AlternativeGreeting\";\r\n\r\n// types\r\nexport type UserType = {\r\n    _id: string // need to fix any\r\n    name: string // need to fix any\r\n}\r\n\r\n// уровень работы с глобальными данными\r\nfunction HW3() {\r\n    const [users, setUsers] = useState<Array<UserType>>([]); // need to fix any\r\n\r\n    const addUserCallback = (name: string) => { // need to fix any\r\n        let newInputElement = [{_id: v1(), name: name}, ...users]\r\n        setUsers(newInputElement); // need to fix\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            homeworks 3\r\n            {/*should work (должно работать)*/}\r\n            <GreetingContainer users={users} addUserCallback={addUserCallback}/>\r\n            <hr/>\r\n            {/*для личного творчества, могу проверить*/}\r\n            <AlternativeGreeting users = {users}\r\n                                 message={'Hello, '}\r\n            userNumberInTheList = {'! Your number in the list: ' }\r\n            />\r\n            <hr/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HW3;\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport s from \"./SuperButton.module.css\";\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nexport const SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${red ? s.red : s.default} ${className}`;\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    );\r\n}\r\n\r\nexport default SuperButton;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport s from \"./SuperCheckbox.module.css\";\r\nimport {isBoolean} from \"util\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n};\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        // сделайте так чтоб работал onChange и onChangeChecked\r\n        onChange // если есть пропс onChange\r\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked);\r\n\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : \"\"}`;\r\n\r\n    return (\r\n        <label className={s.labelCheckbox}>\r\n            <input\r\n                type={\"checkbox\"}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    );\r\n}\r\n\r\nexport default SuperCheckbox;\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport SuperInputText from \"./common/c1-SuperInputText/SuperInputText\";\r\nimport s from \"./HW4.module.css\";\r\nimport SuperButton from \"./common/c2-SuperButton/SuperButton\";\r\nimport SuperCheckbox from \"./common/c3-SuperCheckbox/SuperCheckbox\";\r\n\r\nfunction HW4() {\r\n    const [text, setText] = useState<string>(\"\");\r\n    const error = text ? \"\" : \"error\";\r\n    const showAlert = () => {\r\n        if (error) {\r\n            alert(\"введите текст...\");\r\n        } else {\r\n            alert(text); // если нет ошибки показать текст\r\n            setText('')\r\n        }\r\n    }\r\n\r\n    const [checked, setChecked] = useState<boolean>(false);\r\n    const testOnChange = (e: ChangeEvent<HTMLInputElement>) => setChecked(e.currentTarget.checked);\r\n\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            homeworks 4\r\n\r\n            <div className={s.column}>\r\n                {/*should work (должно работать)*/}\r\n                <SuperInputText\r\n                    value={text}\r\n                    onChangeText={setText}\r\n                    onEnter={showAlert}\r\n                    error={error}\r\n                   // className={s.blue} // проверьте, рабоет ли смешивание классов\r\n                />\r\n\r\n                {/*should work (должно работать)*/}\r\n                <SuperButton\r\n                    red // пропсу с булевым значением не обязательно указывать true\r\n                    onClick={showAlert}\r\n                >\r\n                    delete {/*// название кнопки попадёт в children*/}\r\n                </SuperButton>\r\n\r\n                {/*should work (должно работать)*/}\r\n                  <SuperCheckbox\r\n                      checked={checked}\r\n                      onChangeChecked={setChecked}\r\n                  >\r\n                      some text {/*// этот текст попадёт в children*/}\r\n                  </SuperCheckbox>\r\n\r\n                  {/*// onChange тоже должен работать*/}\r\n                  <SuperCheckbox checked={checked} onChange={testOnChange}/>\r\n\r\n            </div>\r\n\r\n            <hr/>\r\n            {/*для личного творчества, могу проверить*/}\r\n            {/*<AlternativeSuperInputText/>*/}\r\n            {/*<AlternativeSuperButton/>*/}\r\n            {/*<AlternativeSuperCheckbox/>*/}\r\n            <hr/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HW4;\r\n","import React from \"react\";\r\nimport s from \"./App.module.css\";\r\nimport HW1 from \"../../../p2-homeworks/h1/HW1\";\r\nimport HW2 from \"../../../p2-homeworks/h2/HW2\";\r\n\r\nimport h from \"../../../p2-homeworks/h1/Message.module.css\";\r\nimport HW3 from \"../../../p2-homeworks/h3/HW3\";\r\nimport HW4 from \"../../../p2-homeworks/h4/HW4\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className={s.App}>\r\n            <div>react homeworks:</div>\r\n            {/*<HW1/>*/}\r\n            {/*<HW2/>*/}\r\n            <HW3/>\r\n            <HW4/>\r\n            {/*<HW5/>*/}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./p1-main/m1-ui/u1-app/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}