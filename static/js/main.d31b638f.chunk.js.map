{"version":3,"sources":["p2-homeworks/h1/Message.module.css","p2-homeworks/h2/Affairs.module.css","p2-homeworks/h4/common/c1-SuperInputText/SuperInputText.module.css","p2-homeworks/h4/common/c3-SuperCheckbox/SuperCheckbox.module.css","p2-homeworks/h4/common/c2-SuperButton/SuperButton.module.css","p2-homeworks/h3/Greeting.module.css","p1-main/m1-ui/u1-app/App.module.css","p2-homeworks/h4/HW4.module.css","p2-homeworks/h1/Message.tsx","p2-homeworks/h1/HW1.tsx","p2-homeworks/h4/common/c2-SuperButton/SuperButton.tsx","p2-homeworks/h2/Affair.tsx","p2-homeworks/h2/Affairs.tsx","p2-homeworks/h2/HW2.tsx","p2-homeworks/h4/common/c1-SuperInputText/SuperInputText.tsx","p2-homeworks/h3/Greeting.tsx","p2-homeworks/h3/GreetingContainer.tsx","p2-homeworks/h3/AlternativeGreeting.tsx","p2-homeworks/h3/HW3.tsx","p2-homeworks/h4/common/c3-SuperCheckbox/SuperCheckbox.tsx","p2-homeworks/h4/HW4.tsx","p1-main/m1-ui/u1-app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Message","props","className","styles","message","avatar_img","src","avatar","wrapper","message_block","name","text","time","messageData","HW1","SuperButton","red","restProps","finalClassName","s","default","Affair","affairBlock","affair","_id","priority","onClick","deleteAffairCallback","Affairs","mappedAffairs","data","map","a","key","affairsButtons","setFilter","defaultAffairs","HW2","useState","affairs","setAffairs","filter","filteredAffairs","el","filterAffairs","deleteAffair","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","finalSpanClassName","finalInputClassName","errorInput","superInput","e","currentTarget","value","Greeting","setNameCallback","addUser","totalUsers","greetingClass","placeholder","errorTextClass","GreetingContainer","users","addUserCallback","setName","setError","length","trim","alert","AlternativeGreeting","user","index","userNumberInTheList","HW3","setUsers","newInputElement","v1","SuperCheckbox","onChangeChecked","children","checkbox","labelCheckbox","checked","HW4","setText","showAlert","setChecked","column","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.d31b638f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__3YiUo\",\"avatar_img\":\"Message_avatar_img__1EXh1\",\"wrapper\":\"Message_wrapper__1mbhI\",\"message_block\":\"Message_message_block__16-jj\",\"name\":\"Message_name__3QgXj\",\"text\":\"Message_text__1Kpp-\",\"time\":\"Message_time__2V5DZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"affairBlock\":\"Affairs_affairBlock__2cny2\",\"buttonDeleteStyles\":\"Affairs_buttonDeleteStyles__v3bAC\",\"affairsButtons\":\"Affairs_affairsButtons__37Mwq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__3_wgf\",\"errorInput\":\"SuperInputText_errorInput__fIqGw\",\"error\":\"SuperInputText_error__1__9R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"labelCheckbox\":\"SuperCheckbox_labelCheckbox__2fJw9\",\"spanClassName\":\"SuperCheckbox_spanClassName__19_fz\",\"checkbox\":\"SuperCheckbox_checkbox__B5wsV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__3udXz\",\"red\":\"SuperButton_red__1l43J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"greetingClass\":\"Greeting_greetingClass__1bufc\",\"someClass\":\"Greeting_someClass__22tPo\",\"error\":\"Greeting_error__2nQid\",\"errorTextClass\":\"Greeting_errorTextClass__3gFBl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2Rg8N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blue\":\"HW4_blue__1YeTy\",\"column\":\"HW4_column__1ihtZ\"};","import React from \"react\";\r\nimport styles from \"./Message.module.css\";\r\n\r\ntype MessageProps = {\r\n    avatar: string\r\n    name: string\r\n    message: string\r\n    time: string\r\n}\r\n\r\nconst Message: React.FC<MessageProps> = (props) => {\r\n    return (\r\n        <div className={styles.message}>\r\n            <img className={styles.avatar_img} src={props.avatar}/>\r\n            <div className={styles.wrapper}>\r\n                <div className={styles.message_block}>\r\n                    <span className={styles.name}>{props.name}</span>\r\n                    <span className={styles.text}>{props.message}</span>\r\n                    <span className={styles.time}>{props.time}</span>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport Message from \"./Message\";\r\n\r\nconst messageData = {\r\n    avatar: \"https://scontent.fdnk3-2.fna.fbcdn.net/v/t1.0-9/p960x960/70912169_3605326306160106_9176558413746798592_o.jpg?_nc_cat=103&ccb=2&_nc_sid=85a577&_nc_ohc=O-l9uQbLtaAAX9HVT3Q&_nc_ht=scontent.fdnk3-2.fna&tp=6&oh=9dae4a430ae7cd63dc04e9b99ffe6551&oe=5FE0A867\",\r\n    name: \"Pavel\",\r\n    message: \"npm start нажимал?\",\r\n    time: \"20:00\",\r\n};\r\n\r\n\r\nfunction HW1() {\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            homeworks 1\r\n            {/*should work (должно работать)*/}\r\n            <Message\r\n                avatar={messageData.avatar}\r\n                name={messageData.name}\r\n                message={messageData.message}\r\n                time={messageData.time}\r\n            />\r\n            <hr/>\r\n            {/*для личного творчества, могу проверить*/}\r\n            {/*<AlternativeMessage/>*/}\r\n            <hr/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HW1;\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport s from \"./SuperButton.module.css\";\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nexport const SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${red ? s.red : s.default} ${className}`;\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    );\r\n}\r\n\r\nexport default SuperButton;\r\n","import React from \"react\";\r\nimport {AffairType} from \"./HW2\";\r\nimport styles from \"./Affairs.module.css\"\r\nimport SuperButton from \"../h4/common/c2-SuperButton/SuperButton\";\r\n\r\ntype AffairPropsType = {\r\n    // key не нужно типизировать\r\n    affair: AffairType// need to fix any\r\n    deleteAffairCallback: (_id: number) => void// need to fix any\r\n}\r\n\r\nfunction Affair(props: AffairPropsType) {\r\n    const deleteCallback = () => {\r\n        props.deleteAffairCallback(props.affair._id)\r\n    };// need to fix\r\n\r\n    return (\r\n        <div className={styles.affairBlock}>\r\n            <ul>\r\n                <li><span> {props.affair._id}. {props.affair.name}: {props.affair.priority} </span>\r\n                    <SuperButton onClick={deleteCallback}>X</SuperButton>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Affair;\r\n","import React from \"react\";\r\nimport Affair from \"./Affair\";\r\nimport {AffairType, FilterType} from \"./HW2\";\r\nimport styles from \"./Affairs.module.css\"\r\nimport SuperButton from \"../h4/common/c2-SuperButton/SuperButton\";\r\n\r\ntype AffairsPropsType = { // need to fix any\r\n    data: Array<AffairType>\r\n    setFilter: (filter:FilterType) => void\r\n    deleteAffairCallback: (_id: number) => void\r\n}\r\n\r\nfunction Affairs(props: AffairsPropsType) {\r\n    const mappedAffairs = props.data.map((a: AffairType) => (\r\n        <Affair // should work\r\n            key={a._id} // кеи ОБЯЗАТЕЛЬНЫ в 99% - так что лучше их писать всегда при создании компонент в мапе\r\n            affair={a}\r\n            deleteAffairCallback={props.deleteAffairCallback}\r\n        />\r\n    ))\r\n\r\n    const setAll = () => {props.setFilter('all')}; // need to fix\r\n    const setHigh = () => {props.setFilter('high')};\r\n    const setMiddle = () => {props.setFilter('middle')};\r\n    const setLow = () => {props.setFilter('low')};\r\n\r\n    return (\r\n        <div className={styles.affairsButtons}>\r\n\r\n            {mappedAffairs}\r\n            <SuperButton onClick={setAll}>All</SuperButton>\r\n            <SuperButton onClick={setHigh}>High</SuperButton>\r\n            <SuperButton onClick={setMiddle}>Middle</SuperButton>\r\n            <SuperButton onClick={setLow}>Low</SuperButton>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Affairs;\r\n","import React, {useState} from \"react\";\r\nimport Affairs from \"./Affairs\";\r\n\r\n\r\n// types\r\nexport type AffairPriorityType = 'high' | 'middle' | 'low'; // need to fix any\r\nexport type AffairType = {\r\n    _id: number,\r\n    name: string,\r\n    priority: AffairPriorityType\r\n} // need to fix any\r\nexport type FilterType = \"all\" | AffairPriorityType;\r\n\r\n// constants\r\nconst defaultAffairs: Array<AffairType> = [ // need to fix any\r\n    {_id: 1, name: \"React\", priority: \"high\"},\r\n    {_id: 2, name: \"anime\", priority: \"low\"},\r\n    {_id: 3, name: \"games\", priority: \"low\"},\r\n    {_id: 4, name: \"work\", priority: \"high\"},\r\n    {_id: 5, name: \"html & css\", priority: \"middle\"},\r\n];\r\n\r\n// pure helper functions\r\nexport const filterAffairs = (affairs: Array<AffairType>, filter: FilterType): Array<AffairType> => { // need to fix any\r\n    if (filter === \"all\") return affairs;\r\n    else if (filter === 'high') {\r\n        return affairs.filter(el => el.priority === 'high');\r\n    } else if (filter === 'middle') {\r\n        return affairs.filter(el => el.priority === 'middle');\r\n    } else {\r\n        return affairs.filter(el => el.priority === 'low');\r\n    }\r\n    // need to fix\r\n}\r\nexport const deleteAffair = (affairs: Array<AffairType>, _id: number): Array<AffairType> => { // need to fix any\r\n    return affairs.filter(a => a._id !== _id ); // need to fix\r\n}\r\n\r\nfunction HW2() {\r\n    const [affairs, setAffairs] = useState<Array<AffairType>>(defaultAffairs); // need to fix any\r\n    const [filter, setFilter] = useState<FilterType>(\"all\");\r\n\r\n    const filteredAffairs = filterAffairs(affairs, filter);\r\n    const deleteAffairCallback = (_id: number) => setAffairs(deleteAffair(affairs, _id)); // need to fix any\r\n\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            homeworks 2\r\n\r\n            {/*should work (должно работать)*/}\r\n            <Affairs\r\n                data={filteredAffairs}\r\n                setFilter={setFilter}\r\n                deleteAffairCallback={deleteAffairCallback}\r\n            />\r\n\r\n            <hr/>\r\n            {/*для личного творчества, могу проверить*/}\r\n            {/*<AlternativeAffairs/>*/}\r\n            <hr/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HW2;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\r\nimport s from \"./SuperInputText.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n};\r\n\r\nexport const SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value);\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        e.key === \"Enter\" // если нажата кнопка Enter\r\n        && onEnter // и есть пропс onEnter\r\n        && onEnter(); // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : \"\"}`;\r\n  // const finalInputClassName = `${s.errorInput} ${className}`; // need to fix with (?:) and s.superInput\r\n    const finalInputClassName = `${error ? s.errorInput : s.superInput}`; // need to fix with (?:) and s.superInput\r\n    return (\r\n        <>\r\n            <input\r\n                type={\"text\"}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SuperInputText;\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./Greeting.module.css\";\r\nimport { SuperInputText } from \"../h4/common/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../h4/common/c2-SuperButton/SuperButton\";\r\n\r\ntype GreetingPropsType = {\r\n    name: string // need to fix any\r\n    setNameCallback: (e: ChangeEvent<HTMLInputElement>) => void // need to fix any\r\n    addUser: () => void // need to fix any\r\n    error: string // need to fix any\r\n    totalUsers: number // need to fix any\r\n}\r\n\r\n// презентационная компонента (для верстальщика)\r\nconst Greeting: React.FC<GreetingPropsType> = (\r\n    {name, setNameCallback, addUser, error, totalUsers} // деструктуризация пропсов\r\n) => {\r\n   // const inputClass = name === '' ? s.error : s.someClass; // need to fix with (?:)\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.greetingClass}>\r\n                <SuperInputText placeholder={`Please, enter the user's name`} value={name} onChange={setNameCallback}/>\r\n                <span className={s.errorTextClass}>{error}</span>\r\n                <SuperButton onClick={addUser}>add</SuperButton>\r\n                <span>{totalUsers}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Greeting;\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport Greeting from \"./Greeting\";\r\nimport {UserType} from \"./HW3\";\r\n\r\ntype GreetingContainerPropsType = {\r\n    users: Array<UserType> // need to fix any\r\n    addUserCallback: (name: string) => void  // need to fix any\r\n}\r\n\r\n// более простой и понятный для новичков\r\n// function GreetingContainer(props: GreetingPropsType) {\r\n\r\n// более современный и удобный для про :)\r\n// уровень локальной логики\r\nconst GreetingContainer: React.FC<GreetingContainerPropsType> = ({users, addUserCallback}) => { // деструктуризация пропсов\r\n    const [name, setName] = useState<string>(\"\"); // need to fix any\r\n    const [error, setError] = useState<string>(\"\"); // need to fix any\r\n\r\n\r\n    const setNameCallback = (e: ChangeEvent<HTMLInputElement>) => { // need to fix any\r\n        setName(e.currentTarget.value);\r\n    };\r\n    const addUser = () => {\r\n        if (name.trim() === '') {\r\n            setError('Error: empty input!')\r\n        } else {\r\n            setError('');\r\n            addUserCallback(name.trim());\r\n            alert(`Hello, ${name.trim()}!`); // need to fix\r\n            setName('');\r\n        }\r\n\r\n    };\r\n    const totalUsers = users.length; // need to fix\r\n\r\n    return (\r\n            <Greeting\r\n                name={name}\r\n                setNameCallback={setNameCallback}\r\n                addUser={addUser}\r\n                error={error}\r\n                totalUsers={totalUsers}\r\n            />\r\n    );\r\n}\r\n\r\nexport default GreetingContainer;\r\n","import React from \"react\";\r\nimport {UserType} from \"./HW3\";\r\n\r\ntype PropsType = {\r\n    users: Array<UserType>\r\n    message: string\r\n    userNumberInTheList: string\r\n\r\n}\r\n\r\nconst AlternativeGreeting: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            {props.users.map((user, index) =>\r\n                (<div key={user._id}>{props.message}\r\n                    {user.name}\r\n                    {props.userNumberInTheList}\r\n                    {props.users.length - index}\r\n                </div>))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AlternativeGreeting;\r\n","import React, {useState} from \"react\";\r\nimport GreetingContainer from \"./GreetingContainer\";\r\nimport {v1} from \"uuid\";\r\nimport AlternativeGreeting from \"./AlternativeGreeting\";\r\n\r\n// types\r\nexport type UserType = {\r\n    _id: string // need to fix any\r\n    name: string // need to fix any\r\n}\r\n\r\n// уровень работы с глобальными данными\r\nfunction HW3() {\r\n    const [users, setUsers] = useState<Array<UserType>>([]); // need to fix any\r\n\r\n    const addUserCallback = (name: string) => { // need to fix any\r\n        let newInputElement = [{_id: v1(), name: name}, ...users]\r\n        setUsers(newInputElement); // need to fix\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            homeworks 3\r\n            {/*should work (должно работать)*/}\r\n            <GreetingContainer users={users} addUserCallback={addUserCallback}/>\r\n            <hr/>\r\n            {/*для личного творчества, могу проверить*/}\r\n            <AlternativeGreeting users = {users}\r\n                                 message={'Hello, '}\r\n            userNumberInTheList = {'! Your number in the list: ' }\r\n            />\r\n            <hr/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HW3;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport s from \"./SuperCheckbox.module.css\";\r\nimport {isBoolean} from \"util\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n};\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        // сделайте так чтоб работал onChange и onChangeChecked\r\n        onChange // если есть пропс onChange\r\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked);\r\n\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : \"\"}`;\r\n\r\n    return (\r\n        <label className={s.labelCheckbox}>\r\n            <input\r\n                type={\"checkbox\"}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    );\r\n}\r\n\r\nexport default SuperCheckbox;\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport SuperInputText from \"./common/c1-SuperInputText/SuperInputText\";\r\nimport s from \"./HW4.module.css\";\r\nimport SuperButton from \"./common/c2-SuperButton/SuperButton\";\r\nimport SuperCheckbox from \"./common/c3-SuperCheckbox/SuperCheckbox\";\r\n\r\nfunction HW4() {\r\n    const [text, setText] = useState<string>(\"\");\r\n    const error = text ? \"\" : \"error\";\r\n    const showAlert = () => {\r\n        if (error) {\r\n            alert(\"введите текст...\");\r\n        } else {\r\n            alert(text); // если нет ошибки показать текст\r\n            setText('')\r\n        }\r\n    }\r\n\r\n    const [checked, setChecked] = useState<boolean>(false);\r\n    const testOnChange = (e: ChangeEvent<HTMLInputElement>) => setChecked(e.currentTarget.checked);\r\n\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            homeworks 4\r\n\r\n            <div className={s.column}>\r\n                {/*should work (должно работать)*/}\r\n                <SuperInputText\r\n                    value={text}\r\n                    onChangeText={setText}\r\n                    onEnter={showAlert}\r\n                    error={error}\r\n                   // className={s.blue} // проверьте, рабоет ли смешивание классов\r\n                />\r\n\r\n                {/*should work (должно работать)*/}\r\n                <SuperButton\r\n                    red // пропсу с булевым значением не обязательно указывать true\r\n                    onClick={showAlert}\r\n                >\r\n                    delete {/*// название кнопки попадёт в children*/}\r\n                </SuperButton>\r\n\r\n                {/*should work (должно работать)*/}\r\n                  <SuperCheckbox\r\n                      checked={checked}\r\n                      onChangeChecked={setChecked}\r\n                  >\r\n                      some text {/*// этот текст попадёт в children*/}\r\n                  </SuperCheckbox>\r\n\r\n                  {/*// onChange тоже должен работать*/}\r\n                  <SuperCheckbox checked={checked} onChange={testOnChange}/>\r\n\r\n            </div>\r\n\r\n            <hr/>\r\n            {/*для личного творчества, могу проверить*/}\r\n            {/*<AlternativeSuperInputText/>*/}\r\n            {/*<AlternativeSuperButton/>*/}\r\n            {/*<AlternativeSuperCheckbox/>*/}\r\n            <hr/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HW4;\r\n","import React from \"react\";\r\nimport s from \"./App.module.css\";\r\nimport HW1 from \"../../../p2-homeworks/h1/HW1\";\r\nimport HW2 from \"../../../p2-homeworks/h2/HW2\";\r\n\r\nimport h from \"../../../p2-homeworks/h1/Message.module.css\";\r\nimport HW3 from \"../../../p2-homeworks/h3/HW3\";\r\nimport HW4 from \"../../../p2-homeworks/h4/HW4\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className={s.App}>\r\n            <div>react homeworks:</div>\r\n            <HW1/>\r\n            <HW2/>\r\n            <HW3/>\r\n            <HW4/>\r\n            {/*<HW5/>*/}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./p1-main/m1-ui/u1-app/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}